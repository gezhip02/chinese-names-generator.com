'use client';
import { useState } from 'react';
import { Sparkles, User2, UserRound, Loader2 } from 'lucide-react';
import type { Gender, GeneratedName } from '@/types';

export default function NameGenerator() {
  const [gender, setGender] = useState<Gender>('male');
  const [surname, setSurname] = useState<string>('Wang');
  const [generatedNames, setGeneratedNames] = useState<GeneratedName[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ gender, surname }),
      });
      
      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error);
      }
      
      setGeneratedNames(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate names');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      <div className="max-w-5xl mx-auto px-4 py-12 sm:py-20">
        <div className="text-center space-y-6 mb-12">
          <div className="inline-block">
            <h1 className="text-4xl sm:text-6xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-rose-600 to-violet-600 tracking-tight mb-2">
              Chinese Name Generator
            </h1>
            <div className="h-1 bg-gradient-to-r from-rose-600 to-violet-600 rounded-full"></div>
          </div>
          
          <p className="text-lg sm:text-xl text-gray-600 dark:text-gray-300 leading-relaxed max-w-3xl mx-auto">
            Welcome to the most-spoken language in the world. Generate authentic Chinese names 
            with meaningful characters and proper pronunciation.
          </p>
          <p className="text-sm text-gray-500 dark:text-gray-400 italic">
            Note: Following Chinese convention, surnames are placed before given names.
          </p>
        </div>

        <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-lg rounded-3xl shadow-2xl p-8 sm:p-10 mb-12">
          <div className="flex flex-col lg:flex-row items-center gap-8 justify-between">
            <div className="flex flex-wrap justify-center gap-6">
              {[
                { value: 'random', icon: Sparkles, label: 'Random' },
                { value: 'male', icon: User2, label: 'Male' },
                { value: 'female', icon: UserRound, label: 'Female' }
              ].map(({ value, icon: Icon, label }) => (
                <label key={value} className="relative flex items-center gap-3 cursor-pointer group">
                  <input
                    type="radio"
                    name="gender"
                    value={value}
                    checked={gender === value}
                    onChange={(e) => setGender(e.target.value as Gender)}
                    className="peer sr-only"
                  />
                  <div className="w-full p-4 rounded-xl bg-gray-50 dark:bg-gray-700/50 flex items-center gap-3 
                    peer-checked:bg-rose-500 peer-checked:text-white
                    transition-all duration-200 ease-in-out hover:bg-gray-100 dark:hover:bg-gray-700">
                    <Icon className="w-5 h-5" />
                    <span className="font-medium">{label}</span>
                  </div>
                </label>
              ))}
            </div>

            <div className="flex flex-col sm:flex-row items-center gap-6">
              <div className="relative">
                <label htmlFor="surname" className="absolute -top-6 left-0 text-sm text-gray-600 dark:text-gray-400">
                  Surname
                </label>
                <input
                  type="text"
                  id="surname"
                  value={surname}
                  onChange={(e) => setSurname(e.target.value)}
                  className="w-64 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-xl px-4 py-3 
                    focus:ring-2 focus:ring-rose-500 focus:border-transparent outline-none transition-all duration-200"
                />
              </div>

              <button
                onClick={handleSubmit}
                disabled={loading}
                className="w-full sm:w-auto bg-gradient-to-r from-rose-500 to-violet-500 hover:from-rose-600 hover:to-violet-600 
                  text-white font-semibold py-3 px-8 rounded-xl transition duration-200 disabled:opacity-50 
                  disabled:cursor-not-allowed min-w-[200px] flex items-center justify-center gap-2 shadow-lg hover:shadow-xl"
              >
                {loading ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    Generating...
                  </>
                ) : (
                  'Generate names'
                )}
              </button>
            </div>
          </div>

          {error && (
            <div className="mt-6 bg-red-50 dark:bg-red-900/30 text-red-500 dark:text-red-400 p-4 rounded-xl border border-red-100 dark:border-red-800">
              <p className="flex items-center">
                <span className="mr-2">⚠️</span>
                {error}
              </p>
            </div>
          )}
        </div>

        {generatedNames.length > 0 && (
          <div className="grid gap-6 md:grid-cols-2">
            {generatedNames.map((name, index) => (
              <div key={index} 
                className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-lg rounded-2xl shadow-xl p-8 
                  transition-all duration-300 hover:shadow-2xl hover:transform hover:-translate-y-1 group">
                <div className="text-center space-y-4">
                  <div className="bg-gradient-to-r from-rose-500/10 to-violet-500/10 p-6 rounded-2xl group-hover:scale-105 transition-transform duration-300">
                    <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                      {name.pinyin}
                    </h2>
                    <p className="text-6xl mb-4 text-gray-800 dark:text-gray-100 font-serif">
                      {name.characters}
                    </p>
                  </div>
                  <div className="inline-block bg-gradient-to-r from-rose-500/5 to-violet-500/5 px-6 py-3 rounded-full">
                    <p className="text-gray-600 dark:text-gray-300">
                      Meaning: <span className="font-medium">"{name.meaning}"</span>
                    </p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}