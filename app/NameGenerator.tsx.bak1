'use client';
import { useState } from 'react';
import { Sparkles, User2, UserRound, Loader2 } from 'lucide-react';
import type { Gender, GeneratedName } from '@/types';

export default function NameGenerator() {
  const [gender, setGender] = useState<Gender>('male');
  const [surname, setSurname] = useState<string>('Zhang');
  const [generatedNames, setGeneratedNames] = useState<GeneratedName[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ gender, surname }),
      });
      
      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error);
      }
      
      setGeneratedNames(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate names');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-rose-50 to-white dark:from-gray-900 dark:to-gray-800">
      <div className="max-w-4xl mx-auto px-4 py-16">
        <div className="text-center mb-16">
          <h1 className="text-5xl font-bold text-gray-900 dark:text-white mb-6 tracking-tight">
            Chinese Name Generator
          </h1>
          
          <p className="text-xl text-gray-600 dark:text-gray-300 leading-relaxed max-w-2xl mx-auto">
            Welcome to the most-spoken language in the world. Generate authentic Chinese names 
            with meaningful characters and proper pronunciation.
          </p>
          <p className="text-gray-500 dark:text-gray-400 mt-4 text-base">
            Note: Following Chinese convention, surnames are placed before given names.
          </p>
        </div>

        <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 mb-12 backdrop-blur-sm bg-opacity-90">
          <div className="flex flex-col md:flex-row items-center gap-8 justify-between">
            <div className="flex flex-wrap items-center gap-6">
              <label className="flex items-center gap-3 cursor-pointer group">
                <input
                  type="radio"
                  name="gender"
                  value="random"
                  checked={gender === 'random'}
                  onChange={(e) => setGender(e.target.value as Gender)}
                  className="w-5 h-5 text-rose-500 border-gray-300 focus:ring-rose-500"
                />
                <Sparkles className="w-5 h-5 text-gray-600 dark:text-gray-300 group-hover:text-rose-500" />
                <span className="text-gray-700 dark:text-gray-300 group-hover:text-rose-500">Random</span>
              </label>
              <label className="flex items-center gap-3 cursor-pointer group">
                <input
                  type="radio"
                  name="gender"
                  value="male"
                  checked={gender === 'male'}
                  onChange={(e) => setGender(e.target.value as Gender)}
                  className="w-5 h-5 text-rose-500 border-gray-300 focus:ring-rose-500"
                />
                <User2 className="w-5 h-5 text-gray-600 dark:text-gray-300 group-hover:text-rose-500" />
                <span className="text-gray-700 dark:text-gray-300 group-hover:text-rose-500">Male</span>
              </label>
              <label className="flex items-center gap-3 cursor-pointer group">
                <input
                  type="radio"
                  name="gender"
                  value="female"
                  checked={gender === 'female'}
                  onChange={(e) => setGender(e.target.value as Gender)}
                  className="w-5 h-5 text-rose-500 border-gray-300 focus:ring-rose-500"
                />
                <UserRound className="w-5 h-5 text-gray-600 dark:text-gray-300 group-hover:text-rose-500" />
                <span className="text-gray-700 dark:text-gray-300 group-hover:text-rose-500">Female</span>
              </label>
            </div>

            <div className="flex items-center gap-4">
              <label htmlFor="surname" className="text-gray-700 dark:text-gray-300">Surname:</label>
              <input
                type="text"
                id="surname"
                value={surname}
                onChange={(e) => setSurname(e.target.value)}
                className="border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 rounded-lg px-4 py-2 text-gray-900 dark:text-white focus:ring-2 focus:ring-rose-500 focus:border-transparent outline-none"
              />
            </div>

            <button
              onClick={handleSubmit}
              disabled={loading}
              className="w-full md:w-auto bg-rose-500 hover:bg-rose-600 text-white font-semibold py-3 px-8 rounded-lg transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed min-w-[200px] flex items-center justify-center gap-2"
            >
              {loading ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  Generating...
                </>
              ) : (
                'Generate names'
              )}
            </button>
          </div>

          {error && (
            <div className="mt-6 bg-red-50 dark:bg-red-900/30 text-red-500 dark:text-red-400 p-4 rounded-lg border border-red-100 dark:border-red-800">
              <p className="flex items-center">
                <span className="mr-2">⚠️</span>
                {error}
              </p>
            </div>
          )}
        </div>

        {generatedNames.length > 0 && (
          <div className="grid gap-6 md:grid-cols-2">
            {generatedNames.map((name, index) => (
              <div key={index} 
                className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-8 transition-all duration-300 hover:shadow-xl hover:transform hover:-translate-y-1">
                <div className="text-center">
                  <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                    {name.pinyin}
                  </h2>
                  <p className="text-5xl mb-6 text-gray-800 dark:text-gray-100 font-serif">
                    {name.characters}
                  </p>
                  <div className="inline-block bg-gray-50 dark:bg-gray-700/50 px-6 py-3 rounded-full">
                    <p className="text-gray-600 dark:text-gray-300 text-sm">
                      Meaning: "{name.meaning}"
                    </p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}